/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/OkCancelDialog.java to edit this template
 */
package org.example.view;

import org.example.model.FontFormat;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author admin
 */
public class ColorSelectorDialog extends JDialog {

    private static boolean isBtnColorForegroundSelected = true;
    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Creates new form ColorSelectorDialog
     */
    public ColorSelectorDialog(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new JButton();
        cancelButton = new JButton();
        colorChooser = new JColorChooser();
        jLabel1 = new JLabel();
        btnForeColor = new JButton();
        btnBackColor = new JButton();
        paneBackColor = new JPanel();
        paneForeColor = new JPanel();

        setTitle("Selector de color");
        setResizable(false);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(this::okButtonActionPerformed);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(this::cancelButtonActionPerformed);

        jLabel1.setText("Elegir:");

        btnForeColor.setText("Color Texto  ");
        btnForeColor.addActionListener(this::btnForeColorActionPerformed);

        btnBackColor.setText("Color Fondo");
        btnBackColor.addActionListener(this::btnBackColorActionPerformed);

        paneBackColor.setBackground(new Color(255, 255, 255));
        paneBackColor.setFocusable(false);

        GroupLayout paneBackColorLayout = new GroupLayout(paneBackColor);
        paneBackColor.setLayout(paneBackColorLayout);
        paneBackColorLayout.setHorizontalGroup(
            paneBackColorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 31, Short.MAX_VALUE)
        );
        paneBackColorLayout.setVerticalGroup(
            paneBackColorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 31, Short.MAX_VALUE)
        );

        paneForeColor.setBackground(new Color(255, 255, 255));
        paneForeColor.setFocusable(false);

        GroupLayout paneForeColorLayout = new GroupLayout(paneForeColor);
        paneForeColor.setLayout(paneForeColorLayout);
        paneForeColorLayout.setHorizontalGroup(
            paneForeColorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        paneForeColorLayout.setVerticalGroup(
            paneForeColorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 31, Short.MAX_VALUE)
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(colorChooser, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 640, GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnForeColor, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBackColor, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(okButton, GroupLayout.PREFERRED_SIZE, 67, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(paneBackColor, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(paneForeColor, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(colorChooser, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(btnForeColor)
                            .addComponent(jLabel1)))
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paneForeColor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(paneBackColor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBackColor))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();

        initMoreComponents();
    }// </editor-fold>//GEN-END:initComponents


    private void initMoreComponents() {
        //btnForeColor.setMnemonic(KeyEvent.VK_E);
        btnForeColor.setActionCommand("enable"); //b3
        btnForeColor.setEnabled(false);
        paneForeColor.setBackground(FontFormat.foregroundColor);

        btnBackColor.setActionCommand("disable"); //b1
        paneBackColor.setBackground(FontFormat.backgroundColor);


        btnForeColor.addActionListener(this::selectColorToModifyActionPerformed);

        btnBackColor.addActionListener(this::selectColorToModifyActionPerformed);

    }

    private void okButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (isBtnColorForegroundSelected) {
            setForeGroundColor();
        } else {
            setBackGroundColor();
        }

        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed


    private void setForeGroundColor(){
        FontFormat.foregroundColor = colorChooser.getColor();
    }

    private void setBackGroundColor(){
        FontFormat.backgroundColor = colorChooser.getColor();
    }


    private void selectColorToModifyActionPerformed(ActionEvent evt) {
        if (isBtnColorForegroundSelected) {
            isBtnColorForegroundSelected = false;
            btnBackColor.setEnabled(false);
            btnForeColor.setEnabled(true);
            setForeGroundColor();
            paneForeColor.setBackground(FontFormat.foregroundColor);
        } else {
            isBtnColorForegroundSelected = true;
            btnBackColor.setEnabled(true);
            btnForeColor.setEnabled(false);
            setBackGroundColor();
            paneBackColor.setBackground(FontFormat.backgroundColor);
        }
    }//G
    /**
     * Closes the dialo
     */
    private void closeDialog(WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void btnBackColorActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnBackColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBackColorActionPerformed

    private void btnForeColorActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnForeColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnForeColorActionPerformed
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ColorSelectorDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ColorSelectorDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ColorSelectorDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ColorSelectorDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        EventQueue.invokeLater(() -> {
            ColorSelectorDialog dialog = new ColorSelectorDialog(new JFrame(), true);
            dialog.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnBackColor;
    private JButton btnForeColor;
    private JButton cancelButton;
    private JColorChooser colorChooser;
    private JLabel jLabel1;
    private JButton okButton;
    private JPanel paneBackColor;
    private JPanel paneForeColor;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
}
